<?php

require_once 'modelplatform.inc';

// Roles.
define('MODELPLATFORM_MODEL_ROLE_NAME', 'Model');

// Vocabularies.
define('MODELPLATFORM_VOCABULARY_AGE_CATEGORY', 'age_category');

define('MODELPLATFORM_JOB_STATUS_CREATED', 95);
define('MODELPLATFORM_JOB_STATUS_DRAFTED', 104);

define('MODELPLATFORM_ROLE_MODEL', 5);
define('MODELPLATFORM_ROLE_CUSTOMER', 4);

/**
 * Implements hook_menu().
 */
function modelplatform_menu() {
  $items = array();

  $items['admin/configure/modelplatform/documents'] = array(
    'title' => t('Modelplatform documents'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('modelplatform_documents_form'),
    'access arguments' =>  array('moderate modelplatform documents'),
  );
  $items['node/%node/clone'] = array(
    'title' => t('Duplicate Job'),
    'page callback' => 'modelplatform_job_clone_callback',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/modelplatform/params'] = array(
    'title' => t('Model platform parametrs'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('modelplatform_params_form'),
    'access arguments' => array('moderate modelplatform documents'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Modelplatform settings form.
 */
function modelplatform_params_form($form, &$form_state) {
  $form['modelplatform_b2b'] = array(
    '#type' => 'textfield',
    '#title' => t('B2B link'),
    '#default_value' => variable_get('modelplatform_b2b', '#'),
  );
  $form['modelplatform_video_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Front page Video URL'),
    '#default_value' => variable_get('modelplatform_video_url', 'http://www.youtube.com/embed/W0-LGL2AizU'),
  );
  $form['modelplatform_body_image_404'] = array(
    '#title' => t('Image for 404 page'),
    '#type' => 'managed_file',
    '#description' => t('This image will be show on the 404 page.'),
    '#default_value' => variable_get('modelplatform_body_image_404', ''),
    '#upload_location' => 'public://',
  );
  $form['#validate'] = array(
    'modelplatform_params_form_validate',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array(
      'modelplatform_params_form_submit',
    ),
  );

  return $form;
}

/**
 * Validate action.
 *
 * @see modelplatform_params_form()
 */
function modelplatform_params_form_validate($form, &$form_state) {
  if (isset($form_state['values']['modelplatform_video_url'])) {
    $url = 'https://www.youtube.com/oembed?url=' . $form_state['values']['modelplatform_video_url']. '&format=json';
    $json = file_get_contents($url);
    if (!$json) {
      if (!$video_id = youtube_get_video_id($form_state['values']['modelplatform_video_url'])) {
        form_set_error('modelplatform_video_url', t('Youtube video data is corrupted.'));
      }
    }
  }
}

/**
 * Submit action.
 *
 * @see modelplatform_params_form()
 */
function modelplatform_params_form_submit($form, &$form_state) {
  global $user;

  if (isset($form_state['values']['modelplatform_b2b'])) {
    variable_set('modelplatform_b2b', $form_state['values']['modelplatform_b2b']);
  }

  if (isset($form_state['values']['modelplatform_video_url'])) {
    $url = 'https://www.youtube.com/oembed?url=' . $form_state['values']['modelplatform_video_url'] . '&format=json';
    $json = file_get_contents($url);
    if ($json) {
      $obj = json_decode($json);
      if (isset($obj->width)) {
        variable_set('modelplatform_video_width', $obj->width);
      }
      if (isset($obj->height)) {
        variable_set('modelplatform_video_height', $obj->height);
      }
    }
    $video_id = youtube_get_video_id($form_state['values']['modelplatform_video_url']);
    variable_set('modelplatform_video_id', $video_id);
    variable_set('modelplatform_video_url', $form_state['values']['modelplatform_video_url']);
  }

  if (isset($form_state['values']['modelplatform_body_image_404'])) {
    if ($file = file_load($form_state['values']['modelplatform_body_image_404'])) {
      $file->status = FILE_STATUS_PERMANENT;
      file_save($file);

      file_usage_add($file, 'modelplatform', 'user', $user->uid);
      $modelplatform_body_image_404_url = file_create_url($file->uri);

      variable_set('modelplatform_body_image_404', $file->fid);
      variable_set('modelplatform_body_image_404_url', $modelplatform_body_image_404_url);
    }
  }
}

/**
 * Implements hook_block_info().
 */
function modelplatform_block_info() {
  $blocks = array();

  $blocks['modelplatform_b2b'] = array(
    'info' => t('Model platform B2B Link'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['modelplatform_video'] = array(
    'info' => t('Front page - Fourth block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['modelplatform_newsletter'] = array(
    'info' => t('Footer - Newsletter'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['modelplatform_job_models_view'] = array(
    'info' => t('Job - Models'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'region ' => 'content',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function modelplatform_block_view($delta = '') {
  switch ($delta) {
    case 'modelplatform_b2b':
      $block['subject'] = '';
      $block['content'] = '<a href="' . variable_get('modelplatform_b2b', '#')
        . '" class="b2b-link"><span>B2B</span> Site</a>';
      break;

    case 'modelplatform_video':
      $block['subject'] = '';
      $block['content']['#attached'] = array(
        'js' => array(
          array('data' => drupal_get_path('module', 'modelplatform') . '/js/modelplatform.js'),
          array(
            'data' => array(
              'modelplatform' => array(
                'videoWidth' => variable_get('modelplatform_video_width', 480),
                'videoHeight' => variable_get('modelplatform_video_height', 270),
                'videoID' => variable_get('modelplatform_video_id', 'W0-LGL2AizU'),
              ),
            ),
            'type' => 'setting',
          ),
        ),
      );
      $video_div = '<div id="ytplayer"></div>';
      $block['content']['#markup'] = '<div id="front_page_video">' . $video_div
        . '</div>';
      break;

    case 'modelplatform_newsletter':
      $_block = module_invoke('webform', 'block_view', 'client-block-215');

      $block['subject'] = t('Newsletter');
      $block['content'] = '<p>' . t('Sign up for our Newsletter to stay updated on our newest offers') . '</p>';
      $block['content'] .= render($_block['content']);
      break;

    case 'modelplatform_job_models_view':
      $block['subject'] = '';
      if (($job = menu_get_object('node', 1)) && $job->type == 'job') {
        $filtered_models_view = views_embed_view('job_models', 'block');
        $hired_models_view = views_embed_view('job_models', 'block_1');
        $block['content']['#markup'] = '<div class="filtered-hired-block">'
            . '<div class="filtered-views-block"><h4 class="job-models-title">' . t('Filtered models') . '</h4>'
              . $filtered_models_view
            . '</div>'
            . '<div class="hired-views-block"><h4 class="job-models-title">' . t('Optioned models') . '</h4>'
              . $hired_models_view
            . '</div>'
          . '</div>';
        $block['content']['#attached'] = array(
          'js' => array(
            array(
              'data' => drupal_get_path('module', 'modelplatform') . '/js/job_model.js'
            ),
          ),
        );
      }
      break;

    default:
      $block = array();
  }

  return $block;
}

/**
 * Implements hook_permission().
 */
function modelplatform_permission() {
  $permissions = array(
    'modelplatform administer models' => array(
      'title' => t('Administer models'),
      'description' => t('Can moderate models profiles.'),
    ),
    'moderate modelplatform documents' => array(
      'title' => t('Administer Modelplatform documents'),
      'description' => t('Can moderate modelplatform document templates.'),
    ),
  );

  return $permissions;
}

/**
 * Modelplatform admin settings.
 */
function modelplatform_documents_form($form, &$form_state) {
  $form['parental_approval_for_minors'] = array(
    '#title' => t('Parental approval for minors'),
    '#type' => 'managed_file',
    '#description' => t('Template parental approval for minors.'),
    '#default_value' => variable_get('parental_approval_for_minors', ''),
    '#upload_location' => 'public://document_templates/',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Modelplatform admin settings submit.
 *
 * @see modelplatform_documents_form()
 */
function modelplatform_documents_form_submit($form, &$form_state) {
  global $user;
  $file = file_load($form_state['values']['parental_approval_for_minors']);
  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);

  variable_set('parental_approval_for_minors', $file->fid);

  file_usage_add($file, 'modelplatform', 'user', $user->uid);
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function modelplatform_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $language ;
  $lang_name = $language->language;
  foreach ($data['tabs'] as $key => &$data_item) {
    if ($data_item['count']) {
      foreach ($data_item['output'] as $i => &$link_item) {
        if ($link_item['#link']['title_callback'] !== 't') {
          $title = $link_item['#link']['title'];

          $query = db_select('locales_source', 'ls');
          $query->condition('ls.source', $title);
          $query->innerJoin('locales_target', 'lt', 'lt.lid = ls.lid');
          $query->condition('lt.language', $lang_name);
          $query->fields('lt', array('translation'));

          $new_title = $query->execute()->fetchfield();
          if (!$new_title) {
            $query = db_select('locales_target', 'lt');
            $query->condition('lt.translation', $title);
            $query->condition('lt.language', $lang_name, '!=');
            $query->innerJoin('locales_source', 'ls', 'lt.lid = ls.lid');
            $query->fields('ls', array('source'));

            $new_title = $query->execute()->fetchfield();
          }
          if ($new_title) {
            $link_item['#link']['title'] = $new_title;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_view_alter().
 */
function modelplatform_node_view_alter(&$build) {
  if ($build['#entity_type'] == 'node'
   && $build['#bundle'] == 'node_gallery_gallery'
   && $build['#view_mode'] == 'teaser') {
    $build['links']['node']['#links']['node-add-image'] = array(
      'title' => t('Add more images'),
      'href' => 'node/' . $build['#node']->nid . '/upload',
      'html' => TRUE,
      'attributes' => array(
        'rel' => 'tag',
        'title' => t('Add more images'),
      ),
    );
    unset($build['links']['node']['#links']['node-readmore']);
    unset($build['links']['comment']);
  }
  elseif ($build['#entity_type'] == 'node'
    && $build['#bundle'] == 'news') {
    $build['field_news_image']['#access'] = TRUE;
    $build['field_news_video']['#access'] = TRUE;
  }
}

/**
 * Implements hook_profile2_update().
 */
function modelplatform_profile2_update($profile) {
  if ($profile->type === 'model_basic_informaiton') {
    $tid = _modelplatform_get_model_age_category($profile);

    if ($old_tid = isset($profile->field_age_category[LANGUAGE_NONE][0]['tid'])) {
      $old_tid = $profile->field_age_category[LANGUAGE_NONE][0]['tid'];
    }

    if ($old_tid != $tid) {
      $profile->field_age_category[LANGUAGE_NONE][0]['tid'] = $tid;
      profile2_save($profile);
    }
  }
}

/**
 * Implements hook_user_update().
 */
function modelplatform_user_update(&$edit, $account, $category) {
  modelplatform_create_full_name($account);
}

/**
 * Implements hook_node_view().
 */
function modelplatform_node_view($node, $view_mode, $langcode) {
  if ($view_mode === 'full') {
    switch ($node->type) {
      case 'news':
        $node_type_name = node_type_get_name($node);
        drupal_set_title($node_type_name);
        break;

      default:
        // Do nothing.
    }
  }
}

/**
 * Implements hook_views_pre_view().
 */
function modelplatform_views_pre_view(&$view, &$display_id, &$args) {
  switch($view->name) {
    case 'models':
      if ($display_id == 'block_1') {
        drupal_add_js(drupal_get_path('module', 'modelplatform') . '/js/model_params.js', 'file');
        $fields = array(
//      'height',
          'chest',
          'waist',
          'hip',
//      'shoe-size',
//      'model-hair-color',
//      'model-eye-color',
        );
        $selectors = array();
        foreach($fields as $field) {
          $selectors[] = ".view-models .views-field-field-$field .field-content";
        }
        drupal_add_js(array(
          'modelplatform_params' => array(
            'selectors' => $selectors,
          ),
        ), 'setting');
      }
      break;

    case 'job_models':
      if ($display_id != 'block_1') {
        if (($job = menu_get_object('node', 1)) && $job->type == 'job') {
          $view_filters = $view->display_handler->get_option('filters');

          $job_wrapper = entity_metadata_wrapper('node', $job);

          $start_date_time = $job_wrapper->field_job_start_date->value()['value'];
          $start_date_time_array = explode(' ', $start_date_time);
          $start_date = $start_date_time_array[0];

          $end_date_time = $job_wrapper->field_job_start_date->value()['value2'];
          $end_date_time_array = explode(' ', $end_date_time);
          $end_date = $end_date_time_array[0];

          $daily_rate = $job_wrapper->field_job_daily_rate_to->value()['amount'] / 100;

          $view->exposed_input['start_date'] = array(
            'date' => $start_date,
          );
          $view->exposed_input['end_date'] = array(
            'date' => $end_date,
          );
          $view_filters['field_daily_rate_amount']['value']['value'] = $daily_rate;
          $view->display_handler->override_option('filters', $view_filters);
        }
      }
      break;
  }
}
