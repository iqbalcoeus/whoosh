<?php

require_once 'modelplatform.inc';

// Roles.
define('MODELPLATFORM_MODEL_ROLE_NAME', 'Model');

// Vocabularies.
define('MODELPLATFORM_VOCABULARY_AGE_CATEGORY', 'age_category');

/**
 * Implements hook_menu().
 */
function modelplatform_menu() {
  $items = array();
  $items['admin/configure/modelplatform/documents'] = array(
    'title' => t('Modelplatform documents'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('modelplatform_documents_form'),
    'access arguments' =>  array('moderate modelplatform documents'),
  );
  $items['node/%node/clone'] = array(
    'title' => t('Duplicate Job'),
    'page callback' => 'modelplatform_job_clone_callback',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function modelplatform_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  switch($form_id) {
    case 'user_profile_form':
      if (isset($form['field_model_is_active'])) {
        $access = in_array(MODELPLATFORM_MODEL_ROLE_NAME, $form['#user']->roles);
        $access = $access && user_access('modelplatform administer models');
        $form['field_model_is_active']['#access'] = $access;

        $is_model = in_array('Model', $form['#user']->roles);
        $form['field_small_business']['#access'] = $is_model;
        $form['picture']['#access'] = !$is_model;
      }
      break;

    case 'user_pass_reset':
      if (isset($form['message']['#markup'])) {
        drupal_set_title(t('One-time login'));
        $message = t('<p>Click on this button to log in to the site.</p>');
        $form['message']['#markup'] = $message;
      }
      break;

    case 'job_node_form':
      $form['actions']['submit']['#submit'][] = 'modelplatform_job_node_form_submit';
      if (isset($form['#node']->nid)
      && ($user->uid === $form['#node']->uid || user_access('edit any job content'))) {
        $form['actions']['clone'] = array(
          '#type' => 'submit',
          '#value' => t('Duplicate Job'),
          '#submit' => array(
            'modelplatform_job_node_form_clone',
          ),
        );
      }
      $form['#validate'][] = 'modelplatform_job_node_form_validate';
      break;

    case 'node_gallery_item_node_form':
      $form['revision_information']['#access'] = FALSE;
      break;

    case 'user_login':
      if (variable_get("autoassignrole_user_active", 0) && !user_access('administer users')
        && !autoassignrole_get_active_path_rid()) {

        // Get a list of valid roles that can be selected.
        $roles = array_intersect_key(user_roles(TRUE), array_filter(variable_get('autoassignrole_user_roles', array())));

        if ($roles) {
          $form['autoassignrole_user'] = array(
            '#type' => 'fieldset',
            '#title' => filter_xss(variable_get('autoassignrole_user_fieldset_title', t('User Roles'))),
            '#collapsible' => FALSE,
            '#collapsed' => FALSE,
          );

          // Sort the roles.
          if (variable_get('autoassignrole_user_sort', 'SORT_ASC') == 'SORT_ASC') {
            asort($roles);
          }
          elseif (variable_get('autoassignrole_user_sort', 'SORT_DESC') == 'SORT_DESC') {
            arsort($roles);
          }
          else {
            drupal_sort_weight($roles, $roles);
          }

          $multiple = variable_get('autoassignrole_user_multiple', 0);
          $user_selection = variable_get('autoassignrole_user_selection', AUTOASSIGNROLE_ELEMENT_RADIO_CHECKBOX);

          $type = 'select';
          if ($user_selection == AUTOASSIGNROLE_ELEMENT_RADIO_CHECKBOX) {
            $type = $user_selection == AUTOASSIGNROLE_ELEMENT_RADIO_CHECKBOX && !$multiple ? 'radios' : 'checkboxes';
          }

          // If not multiple + not required + select box, need a none selection.
          if (!$multiple && !variable_get('autoassignrole_user_required', 0) && $type == 'select') {
            $roles = array(0 => t('None')) + $roles;
          }

          // Set the user description filter format.
          $autoassignrole_user_description = _autoassignrole_get_user_description();

          // Add in the element.
          $form['autoassignrole_user']['user_roles'] = array(
            '#type' => $type,
            '#title' => filter_xss(variable_get('autoassignrole_user_title', t('Role'))),
            '#options' => $roles,
            '#description' => filter_xss_admin($autoassignrole_user_description['value']),
            '#required' => variable_get('autoassignrole_user_required', 0),
            '#multiple' => $multiple,
          );
        }
      }

      $form['#attached']['js'] = array(
        array(
          'data' => array(
            'mp_forms' => array(
              'model' => 5,
              'customer' => 4,
            ),
          ),
          'type' => 'setting',
        ),
        array(
          'data' => drupal_get_path('module', 'mp_forms') . '/js/mp_forms.js',
        ),
      );

      $form['autoassignrole_user']['#weight'] = -100;
      break;

    default:
      // Nothing to do.
  }
}

/**
 * Implements hook_permission().
 */
function modelplatform_permission() {
  $permissions = array(
    'modelplatform administer models' => array(
      'title' => t('Administer models'),
      'description' => t('Can moderate models profiles.'),
    ),
    'moderate modelplatform documents' => array(
      'title' => t('Administer Modelplatform documents'),
      'description' => t('Can moderate modelplatform document templates.'),
    ),
  );

  return $permissions;
}

/**
 * Modelplatform admin settings.
 */
function modelplatform_documents_form($form, &$form_state) {
  $form['parental_approval_for_minors'] = array(
    '#title' => t('Parental approval for minors'),
    '#type' => 'managed_file',
    '#description' => t('Template parental approval for minors.'),
    '#default_value' => variable_get('parental_approval_for_minors', ''),
    '#upload_location' => 'public://document_templates/',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Modelplatform admin settings submit.
 *
 * @see modelplatform_documents_form()
 */
function modelplatform_documents_form_submit($form, &$form_state) {
  global $user;
  $file = file_load($form_state['values']['parental_approval_for_minors']);
  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);

  variable_set('parental_approval_for_minors', $file->fid);

  file_usage_add($file, 'modelplatform', 'user', $user->uid);
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function modelplatform_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $language ;
  $lang_name = $language->language;
  foreach ($data['tabs'] as $key => &$data_item) {
    if ($data_item['count']) {
      foreach ($data_item['output'] as $i => &$link_item) {
        if ($link_item['#link']['title_callback'] !== 't') {
          $title = $link_item['#link']['title'];

          $query = db_select('locales_source', 'ls');
          $query->condition('ls.source', $title);
          $query->innerJoin('locales_target', 'lt', 'lt.lid = ls.lid');
          $query->condition('lt.language', $lang_name);
          $query->fields('lt', array('translation'));

          $new_title = $query->execute()->fetchfield();
          if (!$new_title) {
            $query = db_select('locales_target', 'lt');
            $query->condition('lt.translation', $title);
            $query->condition('lt.language', $lang_name, '!=');
            $query->innerJoin('locales_source', 'ls', 'lt.lid = ls.lid');
            $query->fields('ls', array('source'));

            $new_title = $query->execute()->fetchfield();
          }
          if ($new_title) {
            $link_item['#link']['title'] = $new_title;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_view_alter().
 */
function modelplatform_node_view_alter(&$build) {
  if ($build['#entity_type'] == 'node'
   && $build['#bundle'] == 'node_gallery_gallery'
   && $build['#view_mode'] == 'teaser') {
    $old = $build['links']['node']['#links']['node-readmore'];
    $build['links']['node']['#links']['node-add-image'] = array(
      'title' => t('Add more images'),
      'href' => $old['href'] . '/upload',
      'html' => TRUE,
      'attributes' => array(
        'rel' => 'tag',
        'title' => t('Add more images'),
      ),
    );
    unset($build['links']['node']['#links']['node-readmore']);
    unset($build['links']['comment']);
  }
}

/**
 * Implements hook_profile2_update().
 */
function modelplatform_profile2_update($profile) {
  if ($profile->type === 'model_basic_informaiton') {
    if ($tid = _modelplatform_get_model_age_category($profile)) {
      db_update('field_revision_field_age_category')
        ->fields(array(
          'field_age_category_tid' => $tid,
        ))
        ->condition('entity_id', $profile->pid)
        ->condition('entity_type', 'profile2')
        ->condition('bundle', 'model_basic_informaiton')
        ->condition('revision_id', $profile->vid)
        ->execute();
    }
  }
}
