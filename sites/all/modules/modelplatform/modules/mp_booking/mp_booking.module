<?php

/**
 * @file
 * Model Platform Booking module.
 *
 * BAT integration.
 */

define('MP_BOOKING_CUSTOMER_ROLE_ID', 4);
define('MP_BOOKING_MODEL_ROLE_ID', 5);

define('MP_BOOKING_UNIT_FIELD_NAME', 'field_bat_unit');
define('MP_BOOKING_UNIT_TYPE', 'default');
define('MP_BOOKING_UNIT_TYPE_ID', 1);

define('MP_BOOKING_PERMISSION_JOB_PROPOSE', 'job model propose');

define('MP_BOOKING_MODEL_AVAILABILITY', 'model_availability');

define('MP_BOOKING_STATE_AVAILABLE', 1);
define('MP_BOOKING_STATE_BUSY', 2);
define('MP_BOOKING_STATE_JOB_CONTRACT', 3);
define('MP_BOOKING_STATE_JOB_WAS_PROPOSED', 4);
define('MP_BOOKING_STATE_AUCTION', 5);

require_once 'mp_booking.inc';
require_once 'mp_booking.form.inc';

/**
 * Implements hook_menu().
 */
function mp_booking_menu() {
  $items = array();

  $items['job/model/%/invite'] = array(
    'title' => t('Model invitation'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mp_booking_job_model_invite_form', 2),
    'access callback' => 'user_access',
    'access arguments' => array(MP_BOOKING_PERMISSION_JOB_PROPOSE),
  );

  $items['job/model/%bat_event/auction'] = array(
    'title' => t('Job auction'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mp_booking_job_auction_form', 2),
    'access callback' => 'user_access',
    'access arguments' => array(MP_BOOKING_PERMISSION_JOB_PROPOSE),
  );

  $items['job/propose/%'] = array(
    'title' => t('Model propose'),
    'page callback' => 'mp_booking_model_propose',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array(MP_BOOKING_PERMISSION_JOB_PROPOSE),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function mp_booking_theme($existing, $type, $theme, $path) {
  return array(
    'mp_booking_event_auctions_table' => array(
      'variables' => array('auctions' => array()),
      'file' => 'mp_booking.theme.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function mp_booking_permission() {
  return array(
    MP_BOOKING_PERMISSION_JOB_PROPOSE =>  array(
      'title' => t('Job propose'),
    ),
  );
}

/**
 * Implements hook_user_insert().
 */
function mp_booking_user_insert(&$edit, $account, $category) {
  if (isset($account->roles[MP_BOOKING_MODEL_ROLE_ID])) {
    $unit = _mp_booking_unit_create($account->name, $account->uid);
    // We cann't use $account in the _mp_booking_set_unit().
    $_account = user_load($account->uid);
    _mp_booking_set_unit('user', $_account, $unit);
  }
}

/**
 * Implements hook_user_update().
 */
function mp_booking_user_update(&$edit, $account, $category) {
  if (isset($account->roles[MP_BOOKING_MODEL_ROLE_ID])) {
    // Check field data.
    $unit = _mp_booking_get_unit('user', $account);

    // Create unit if does not exist.
    if (!$unit) {
      $unit = _mp_booking_unit_create($account->name, $account->uid);

      // We cann't use $account in the _mp_booking_set_unit().
      $_account = user_load($account->uid);
      _mp_booking_set_unit('user', $_account, $unit);
    }
  }
}

/**
 * Implements hook_block_info().
 */
function mp_booking_block_info() {
  $blocks = array();
  $blocks['mp_booking_calendar_form'] = array(
    'info' => t('Booking form'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mp_booking_block_view($delta = '') {
  global $user;

  $block = array();
  switch ($delta) {
    case 'mp_booking_calendar_form':
      $block['subject'] = '';

      // Added system library to prevent $(...).tooltip is not a function error.
      drupal_add_library('system', 'ui.tooltip');

      if ($account = _mp_booking_get_calendar_account()) {

        // Generate booking form.
        if (_mp_booking_get_calendar_busy_access()) {
          $booking_form = drupal_get_form('mp_booking_calendar_form', $account);
          $form_rendered = drupal_render($booking_form);
        }
        else {
          $form_rendered = '';
        }

        // Generate calendar.
        $calendar = '<div id="calendar" class="fixed_event_states"></div>';
        $library_path = libraries_get_path('fullcalendar');
        $unit = _mp_booking_get_unit('user', $account);

        $block['content']['#markup'] = $calendar . $form_rendered;
        // Attach additional settings, js and css to block.
        $block['content']['#attached'] = array(
          'js' => array(
            array('data' => $library_path . '/lib/moment.min.js'),
            array('data' => $library_path . '/fullcalendar.js'),
            array('data' => drupal_get_path('module', 'mp_booking') . '/js/mp_booking_calendar.js'),
            array(
              'data' => array(
                'mp_booking' => array(
                  'eventsPath' => _rcb_generate_calendar_events_path($unit),
                ),
              ),
              'type' => 'setting',
            ),
          ),
          'css' => array(
            array('data' => $library_path . '/fullcalendar.css'),
          ),
        );
      }


      break;

  }
  return $block;
}

/**
 * Implements hook_commerce_cart_line_item_refresh().
 */
function mp_booking_commerce_cart_line_item_refresh($line_item, $order_wrapper) {
  // @TODO Create Price function.
//  $price = _get_price($line_item);
//  $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] = $price;
//  $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $price;
}

/**
 * Implements hook_bat_api_events_index_calendar_alter().
 */
function mp_booking_bat_api_events_index_calendar_alter(&$events, $context) {
  foreach ($events as &$event) {
    if ($event['title']) {
      unset($event['rendering']);
    }
  }
}

