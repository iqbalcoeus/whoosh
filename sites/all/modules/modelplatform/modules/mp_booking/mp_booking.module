<?php

/**
 * @file
 * Model Platform Booking module.
 *
 * BAT integration.
 */

define('MP_BOOKING_CUSTOMER_ROLE_ID', 4);
define('MP_BOOKING_MODEL_ROLE_ID', 5);

define('MP_BOOKING_UNIT_FIELD_NAME', 'field_bat_unit');
define('MP_BOOKING_UNIT_TYPE', 'default');
define('MP_BOOKING_UNIT_TYPE_ID', 1);

define('MP_BOOKING_PERMISSION_JOB_PROPOSE', 'job model propose');

define('MP_BOOKING_MODEL_AVAILABILITY', 'model_availability');

define('MP_BOOKING_STATE_AVAILABLE', 1);
define('MP_BOOKING_STATE_BUSY', 2);
define('MP_BOOKING_STATE_JOB_CONTRACT', 3);
define('MP_BOOKING_STATE_JOB_WAS_PROPOSED', 4);
define('MP_BOOKING_STATE_AUCTION', 5);

define('MP_BOOKING_AUCTION_REQUEST_SENT', 'request sent');
define('MP_BOOKING_AUCTION_CONFIRMED', 'confirmed');
define('MP_BOOKING_AUCTION_READ', 'read');
define('MP_BOOKING_AUCTION_UNREAD', 'unread');

define('MP_BOOKING_MAX_NEGOTIATIONS', 3);

define('MP_BOOKING_EMPTY_JOB', -1);

require_once 'mp_booking.inc';
require_once 'mp_booking.form.inc';
require_once 'mp_booking.block.inc';

module_load_include('inc', 'mp_auction', 'mp_auction_mp_auction.admin');
module_load_include('inc', 'bat_event', 'bat_event.admin');

/**
 * Implements hook_menu().
 */
function mp_booking_menu() {
  $items = array();

  $items['job/model/%/invite'] = array(
    'title' => t('Model invitation'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mp_booking_job_model_invite_form', 2),
    'access callback' => 'user_access',
    'access arguments' => array(MP_BOOKING_PERMISSION_JOB_PROPOSE),
  );

  $items['job/event/%bat_event/auction'] = array(
    'title' => t('Job propose'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mp_booking_job_auction_form', 2),
    'access callback' => 'mp_booking_auction_access',
    'access arguments' => array(2),
  );

  $items['job/event/%bat_event/approve/%'] = array(
    'page callback' => 'mp_booking_reciept_approve',
    'page arguments' => array(2, 4),
    'access callback' => 'user_access',
    'access arguments' => array(MODELPLATFORM_MODERATE_DOCUMENTS),
  );
  $items['job/event/%bat_event/remove/%'] = array(
    'page callback' => 'mp_booking_reciept_remove',
    'page arguments' => array(2, 4),
    'access callback' => 'user_access',
    'access arguments' => array(MODELPLATFORM_MODERATE_DOCUMENTS),
  );

  $items['job/propose/%'] = array(
    'title' => t('Model propose'),
    'page callback' => 'mp_booking_model_propose',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array(MP_BOOKING_PERMISSION_JOB_PROPOSE),
  );

  $items['job/%/model-search'] = array(
    'title' => t('Job search redirect page'),
    'page callback' => 'mp_booking_job_model_search',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array(MP_BOOKING_PERMISSION_JOB_PROPOSE),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function mp_booking_theme($existing, $type, $theme, $path) {
  return array(
    'mp_booking_event_auctions_table' => array(
      'variables' => array('auctions' => array()),
      'file' => 'mp_booking.theme.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function mp_booking_permission() {
  return array(
    MP_BOOKING_PERMISSION_JOB_PROPOSE =>  array(
      'title' => t('Job propose'),
    ),
  );
}

/**
 * Implements hook_user_insert().
 */
function mp_booking_user_insert(&$edit, $account, $category) {
  if (isset($account->roles[MP_BOOKING_MODEL_ROLE_ID])) {
    $unit = _mp_booking_unit_create($account->name, $account->uid);
    // We cann't use $account in the _mp_booking_set_unit().
    $_account = user_load($account->uid);
    _mp_booking_set_unit('user', $_account, $unit);
  }
}

/**
 * Implements hook_user_update().
 */
function mp_booking_user_update(&$edit, $account, $category) {
  if (isset($account->roles[MP_BOOKING_MODEL_ROLE_ID])) {
    // Check field data.
    $unit = _mp_booking_get_unit('user', $account);

    // Create unit if does not exist.
    if (!$unit) {
      $unit = _mp_booking_unit_create($account->name, $account->uid);

      // We cann't use $account in the _mp_booking_set_unit().
      $_account = user_load($account->uid);
      _mp_booking_set_unit('user', $_account, $unit);
    }
  }
}

/**
 * Implements hook_block_info().
 */
function mp_booking_block_info() {
  $blocks = array();
  $blocks['mp_booking_calendar_form'] = array(
    'info' => t('Booking form'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['mp_booking_model_reciepts'] = array(
    'info' => t('Job model reciepts form'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mp_booking_block_view($delta = '') {
  switch ($delta) {
    case 'mp_booking_calendar_form':
      $block['subject'] = '';
      $block['content'] = _mp_booking_calendar_form_block_content();
      break;

    case 'mp_booking_model_reciepts':
      $block['subject'] = '';
      $block['content'] = _mp_booking_job_model_reciepts_form_block_content();
      break;

    default:
      $block = array();
  }

  return $block;
}

/**
 * Implements hook_commerce_cart_line_item_refresh().
 */
function mp_booking_commerce_cart_line_item_refresh($line_item, $order_wrapper) {
  // @TODO Create Price function.
//  $price = _get_price($line_item);
//  $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] = $price;
//  $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $price;
}

/**
 * Implements hook_bat_api_events_index_calendar_alter().
 */
function mp_booking_bat_api_events_index_calendar_alter(&$events, $context) {
  foreach ($events as &$event) {
    if ($event['bat_id']) {
      $_event = bat_event_load($event['bat_id']);
      $event['start'] = str_replace(' ', 'T', $_event->start_date);
      $event['end'] = str_replace(' ', 'T', $_event->end_date);
      $event['tooltip'] = $_event->start_date_object->format('h:i A') . ' ' . $event['title'] . ' ' . $_event->end_date_object->format('h:i A');
      unset($event['rendering']);
    }
  }
}

/**
 * Implements hook_views_api().
 */
function mp_booking_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Access function.
 */
function mp_booking_auction_access($event) {
  global $user;

  $access = FALSE;

  $event_wrapper = entity_metadata_wrapper('bat_event', $event);
  $unit = $event_wrapper->event_bat_unit_reference->value();

  $access = $access || ($unit->uid === $user->uid);

  return $access;
}
