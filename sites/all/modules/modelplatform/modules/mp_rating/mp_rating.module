<?php

/**
 * @file
 */

require_once 'mp_rating.inc';

/**
 * Implements hook_votingapi_insert().
 */
function mp_rating_votingapi_insert($votes) {
  foreach($votes as $vote) {
    if ($vote['entity_type'] == 'bat_event') {
      $event_id = $vote['entity_id'];
      $event = bat_event_load($event_id);
      $event_wrapper = entity_metadata_wrapper('bat_event', $event);
      $unit = $event_wrapper->event_bat_unit_reference->value();
      $job = $event_wrapper->field_job->value();
      $model_uid = $unit->uid;
      $customer_uid = $job->uid;

      _votingapi_prep_vote($vote);
      $vote['entity_type'] = 'user';
      unset($vote['vote_id']);
      if ($vote['uid'] == $model_uid) {
        $vote['entity_id'] = $customer_uid;
      }
      elseif ($vote['uid'] == $customer_uid) {
        $vote['entity_id'] = $model_uid;
      }
      _fivestar_update_field_value($vote['entity_type'], user_load($vote['entity_id']), 'field_rating', LANGUAGE_NONE, $vote['value']);
      _mp_rating_remove_row($vote['uid'], $event_id, $job->nid);
    }
  }
}

/**
 * Implements hook_modelplatform_job_complete().
 */
function mp_rating_modelplatform_job_complete($job_nid, $event_id) {
  $job = node_load($job_nid);
  $event = bat_event_load($event_id);
  $event_wrapper = entity_metadata_wrapper('bat_event', $event);
  $unit = $event_wrapper->event_bat_unit_reference->value();

  if ($unit->uid && $event_id && $job->nid && $job->uid) {
    $model_item = array(
      'uid' => $unit->uid,
      'event_id' => $event_id,
      'job_nid' => $job->nid,
    );
    _mp_rating_fill_row($model_item);

    $customer_item = array(
      'uid' => $job->uid,
      'event_id' => $event_id,
      'job_nid' => $job->nid,
    );
    _mp_rating_fill_row($customer_item);
  }
}

/**
 * Implements hook_block_info().
 */
function mp_rating_block_info() {
  $blocks = array();

  $blocks['mp_rating_block'] = array(
    'info' => t('Job - Rating'),
    'cache' => DRUPAL_NO_CACHE,
    'region ' => 'content',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mp_rating_block_view($delta = '') {
  switch ($delta) {
    case 'mp_rating_block':
      $block = _mp_rating_job_rate_block();
      break;

    default:
      $block = array();
  }

  return $block;
}

/**
 * Implements hook_cron().
 */
function mp_rating_cron() {
  $query = db_select('bat_events', 'be');
  $query->innerJoin('field_data_event_state_reference', 'st',
    'st.entity_type = \'bat_event\' AND 
    st.entity_id = be.event_id AND 
    st.event_state_reference_state_id = 3');
  $query->innerJoin('field_data_field_job', 'fj',
    'fj.entity_type = \'bat_event\' AND 
    fj.entity_id = be.event_id');
  $query->condition('be.end_date', date('Y-m-d', REQUEST_TIME - 3600 * 24 * 8),'<');
  $query->addField('be', 'event_id', 'event_id');
  $query->addField('fj', 'field_job_target_id', 'job_nid');

  $job_data = $query->execute()->fetchAll();

  $queue = DrupalQueue::get('mp_rating_complited_jobs_rating_ends');
  foreach ($job_data as $job_info) {
    $queue->createItem($job_info);
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function mp_rating_cron_queue_info() {
  $queues['mp_rating_complited_jobs_rating_ends'] = array(
    'worker callback' => '_mp_rating_complited_jobs_rating_ends_callback',
    'time' => 60,
  );

  return $queues;
}