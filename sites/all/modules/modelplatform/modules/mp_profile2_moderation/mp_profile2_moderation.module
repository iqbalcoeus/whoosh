<?php
/**
 * Created by PhpStorm.
 * User: cimpleo
 * Date: 22.11.16
 * Time: 16:20
 */

require_once 'mp_profile2_moderation.inc';

/**
 * Implements hook_menu().
 */
function mp_profile2_moderation_menu() {
  $items = array();
  $items['admin/profile/%profile2/revisions/%/reject'] = array(
    'title' => 'Delete revision',
    'load arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile2_moderation_revision_reject_confirm', 2, 4),
    'access arguments' =>  array('delete profile revisions'),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function mp_profile2_moderation_menu_alter(&$items) {
  if (isset($items['admin/people/profiles/moderation'])) {
    $items['admin/people/profiles/moderation']['page callback'] = '_mp_profile2_moderation_page';
  }
}

/**
 * Implements hook_permission().
 */
function mp_profile2_moderation_permission() {
  $permissions = array(
    'reject profile revisions' => array(
      'title' => t('Reject model profile revisions.'),
      'description' => t('Can moderate models profiles.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_user_insert().
 */
function mp_profile2_moderation_user_insert(&$edit, $account, $category) {
  if (in_array(MODELPLATFORM_MODEL_ROLE_NAME, $account->roles)) {
    $types = array(
      'model_private_data',
      'model_basic_informaiton',
      'model_additional_info',
      'previous_model_jobs',
      'galleries',
      'model_videos',
    );
    foreach ($types as $type) {
      $profile = profile2_create(array('type' => $type, 'uid' => $account->uid));
      profile2_save($profile);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function mp_profile2_moderation_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'node_gallery_item_node_form':
      $form['field_ver_status']['#disabled'] = !user_access('reject profile revisions');
      break;

    default:
      // Nothing to do.
  }
}

/**
 * Implements hook_workbench_moderation_transition().
 */
function mp_profile2_moderation_workbench_moderation_transition($node, $previous_state, $new_state) {
  if ($_SESSION['prevent_error']) {
    $_SESSION['prevent_error'] = FALSE;
    return;
  }
  if ($previous_state !== $new_state && user_access('reject profile revisions')) {
    $status_field = field_get_items('node', $node, 'field_ver_status');
    if (isset($status_field[0]['tid'])) {
      $terms = array();
      switch ($new_state) {
        case 'draft':
          $terms = taxonomy_get_term_by_name('hidden/rejected', 'verification_status');
          break;

        case 'published':
          $terms = taxonomy_get_term_by_name('approved', 'verification_status');
          break;

        default:
          // Nothing to do.
      }

      if (count($terms)) {
        $_SESSION['prevent_error'] = TRUE;
        $term = reset($terms);
        $node->field_ver_status[LANGUAGE_NONE][0]['tid'] = $term->tid;
        node_save($node);
      }
    }
  }
}