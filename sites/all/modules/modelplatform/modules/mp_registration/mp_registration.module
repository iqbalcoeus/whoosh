<?php

/**
 * @file
 * Model Platform - Registration.
 */

/**
 * Implements hook_form_alter().
 */
function mp_registration_form_alter(&$form, &$form_state, $form_id) {
  // Switch if in the feature we will need alter more then 1 registration form.
  switch ($form_id) {
    case 'user_register_form':
      $selector = 'input[name="user_roles"]';
      $form['field_small_business']['#states'] = array(
        'visible' => array(
          array(
            $selector => array(
              'value' => 5,
            ),
          ),
        ),
        'invisible' => array(
          array(
            $selector => array(
              '!value' => 5,
            ),
          ),
        ),
      );

      $form['#attached']['js'] = array(
        array(
          'data' => array(
            'mp_forms' => array(
              'model' => 5,
              'customer' => 4,
            ),
          ),
          'type' => 'setting',
        ),
        array(
          'data' => drupal_get_path('module', 'mp_forms') . '/js/mp_forms.js',
        ),
      );

      $form['autoassignrole_user']['#weight'] = -100;
      $form['autoassignrole_user']['user_roles']['#default_value'] = isset($form_state['input']['user_roles']) ?
        $form_state['input']['user_roles'] : 4;
      // Checking wheather consumer and secreat key set to show login with xing
      // link.
      if (variable_get('xing_connect_ckey') &&
        variable_get('xing_connect_skey')) {

        $variables = array(
          'path' => 'xing/auth',
          'query' => drupal_get_query_parameters(),
        );

        $form['xing_btn'] = array(
          '#type' => 'markup',
          '#theme' => 'xing_connect_button_display',
          '#data' => $variables,
          '#weight' => -10,
        );
      }
      else {
        watchdog('xing_connect', 'Xing API keys is not configured correctly.');
        drupal_set_message(t('Xing API keys/secreat key is not configured correctly.'), 'warning');
      }
      break;

    default:
      // Nothing to do.
  }
}

/**
 * Implements hook_xing_connect_register_alter().
 */
function mp_registration_xing_connect_register_alter(&$fields, $xing_candidate_info) {
  $fields['roles'][4] = 'Customer';
  $fields['field_first_name'][LANGUAGE_NONE][0]['value'] = $xing_candidate_info['users'][0]['first_name'];
  $fields['field_last_name'][LANGUAGE_NONE][0]['value'] = $xing_candidate_info['users'][0]['last_name'];
}

/**
 * Implements hook_block_view_alter().
 */
function mp_registration_block_view_alter(&$data, $block) {
  global $is_https;
  global $base_url;

  if ($block->delta === 'social_login_widget') {
    // Read Settings.
    $settings = social_login_widget_get_settings();

    $css_path = $base_url . '/' . drupal_get_path('module', 'mp_registration') . '/css/mp_social_login.css';

    // Container to add the buttons to.
    $containerid = 'social_login_providers_' . rand(99999, 9999999);
    $data['content']['#markup'] = theme('social_login_widget_provider_container_block', array('containerid' => $containerid));

    //Get Javscript Library
    $js_library = social_login_widget_get_js_library($settings['api_subdomain'], $is_https);

    //Get inline Javascript.
    $js_inline = social_login_widget_get_js_plugin('social_login', $settings['api_subdomain'], $settings['enabled_providers'], $containerid);
    $js_inline .= '_oneall.push([\'social_login\', \'set_custom_css_uri\', \'' . $css_path . '\');\n';

    // Build the callback uri.
    $callback_uri = url('social_login/callback', array('absolute' => TRUE, 'query' => array ('origin' => $base_url)));

    $js_inline = "
      var _oneall = _oneall || [];
      _oneall.push(['social_login', 'set_callback_uri', '$callback_uri']);
      _oneall.push(['social_login', 'set_providers', ['facebook', 'instagram', 'linkedin']]);
      _oneall.push(['social_login', 'set_custom_css_uri', '$css_path']);
      _oneall.push(['social_login', 'do_render_ui', '$containerid']);
    ";
    // Attached cacheable Javascript
    $data['content']['#attached']['js'] = array(
      $js_library => array('type' => 'external'),
      $js_inline => array('type' => 'inline', 'scope' => 'footer'),
    );
  }
}
