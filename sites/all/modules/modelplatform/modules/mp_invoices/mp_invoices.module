<?php

/**
 * @file
 * Model Platform - Invoices system.
 */

define('MP_INVOICES_LINE_ITEM_TYPE_MAIN', 'main');
define('MP_INVOICES_LINE_ITEM_TYPE_TAX', 'tax');
define('MP_INVOICES_LINE_ITEM_TYPE_ADDITIONAL', 'additional');

require_once 'mp_invoices.inc';
require_once 'mp_invoices.access.inc';

/**
 * Implements hook_menu().
 */
function mp_invoices_menu() {
  $items = array();

  $items['user/%user/invoices/%commerce_order'] = array(
    'title' => t('My invoices'),
    'page callback' => 'mp_invoices_page_callback',
    'page arguments' => array(1, 3),
    'access callback' => 'mp_invoices_access_own_invoices',
    'access arguments' =>  array(1, 3),
    'file' => 'mp_invoices.page.inc',
  );

  $items['admin/modelplatform/params/invoice'] = array(
    'title' => t('Model platform - Invoice parametrs'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mp_invoices_params_form'),
    'access arguments' => array('moderate modelplatform documents'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mp_invoices.form.inc',
  );

//  $items['mp_pdf/invoices/$order'] = array(
//    'page callback' => 'mp_invoices_pdf',
//    'access callback' => 'mp_invoices_access_own_invoices',
//    'access arguments' => array('view own model platform invoices'),
//    'type' => MENU_NORMAL_ITEM,
//  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function mp_invoices_permission() {
  $permissions = array(
    'view own model platform invoices' => array(
      'title' => t('View own invoices.'),
      'description' => t('View own invoices.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_theme().
 */
function mp_invoices_theme($existing, $type, $theme, $path) {
  return array(
    'mp_invoices_page' => array(
      'variables' => array(
        'header' => array(),
        'content' => array(),
        'footer' => array(),
      ),
      'file' => 'mp_invoices.theme.inc',
    ),
  );
}

/**
 * Implements hook_commerce_order_state_info().
 */
function mp_invoices_commerce_order_state_info() {
  $order_states = array();

  $order_states['job_invoice_state'] = array(
    'name' => 'job_invoice_state',
    'title' => t('Job invoice state'),
    'description' => t('Orders in this state are not in the cart.'),
    'weight' => 10,
    'default_status' => 'job_invoice_status',
  );

  return $order_states;
}

/**
 * Implements hook_commerce_order_status_info().
 */
function mp_invoices_commerce_order_status_info() {
  $order_statuses = array();

  $order_statuses['job_invoice_status'] = array(
    'name' => 'job_invoice_status',
    'title' => t('Job invoice status'),
    'state' => 'job_invoice_state',
  );

  return $order_statuses;
}

/**
 * Implements hook_entity_update().
 */
function mp_invoices_entity_update($entity, $type) {
  if ($type == 'bat_event') {
    $event_wrapper = entity_metadata_wrapper($type, $entity);
    $state_id = $event_wrapper->event_state_reference->value()['state_id'];
    if ($state_id == MP_BOOKING_STATE_JOB_CONTRACT) {
      $job = $event_wrapper->field_job->value();
      $cost = $event_wrapper->field_job_cost->value();
      $unit = $event_wrapper->event_bat_unit_reference->value();

      $interval = $entity->start_date_object->diff($entity->end_date_object);

      $model = user_load($unit->uid);
      $model_wrapper = entity_metadata_wrapper('user', $model);
      $model_full_name = $model_wrapper->field_full_name->value();

      $order = $event_wrapper->field_order->value();
      if (!$order) {
        $order = commerce_order_new($job->uid, 'job_invoice_status');
        $order->field_event[LANGUAGE_NONE][0]['target_id'] = $entity->event_id;
        commerce_order_save($order);

        $event_wrapper->field_order->set($order);
        $event_wrapper->save();
      }
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

      $line_items = array();

      // Main.
      $line_items[] = _mp_invoices_line_item_create($order->order_id, $model_full_name . ' (day)', $interval->days, $cost, MP_INVOICES_LINE_ITEM_TYPE_MAIN);

      if (_mp_invoices_model_is_german($model)) {
        $tax_value = variable_get('mp_invoices_german_default_tax', 19);
        $tax_label = variable_get('mp_invoices_german_default_tax_label','VAT on fees');
        $tax_cost = array(
          'amount' => $cost['amount'] * $interval->days * $tax_value / 100,
          'currency_code' => $cost['currency_code'],
        );
        $line_items[] = _mp_invoices_line_item_create($order->order_id, $tax_value . '% ' . t($tax_label), 1, $tax_cost, MP_INVOICES_LINE_ITEM_TYPE_MAIN);
      }

      // Taxes.
      $commission = variable_get('mp_invoices_commission', 10);
      $commission_label = variable_get('mp_invoices_commission_label', 'Commission');
      $result_commission_amount = $cost['amount'] * $interval->days * $commission / 100;
      $commission_cost = array(
        'amount' => $result_commission_amount,
        'currency_code' => $cost['currency_code'],
      );
      $line_items[] = _mp_invoices_line_item_create($order->order_id, $commission . '% ' . t($commission_label), 1, $commission_cost, MP_INVOICES_LINE_ITEM_TYPE_TAX);

      $tax = variable_get('mp_invoices_commission', 19);
      $tax_label = variable_get('mp_invoices_commission_tax', 'VAT (on commissioning fee)');
      $result_commission_tax_amount = $result_commission_amount * $tax / 100;
      $commission_tax_cost = array(
        'amount' => $result_commission_tax_amount,
        'currency_code' => $cost['currency_code'],
      );
      $line_items[] = _mp_invoices_line_item_create($order->order_id, $tax . '% ' . t($tax_label), 1, $commission_tax_cost, MP_INVOICES_LINE_ITEM_TYPE_TAX);

      // Additional.
      $field_collections = $event_wrapper->field_additional_receipts->value();
      foreach ($field_collections as $field_collection_item) {
        $fc_wrapper = entity_metadata_wrapper('field_collection_item', $field_collection_item);
        $approved = $fc_wrapper->field_reciept_approved_by_admin->value();
        if ($approved) {
          $reciept_type = $fc_wrapper->field_reciept_type->value();
          $reciept_comment = $fc_wrapper->field_reciept_comment->value();
          $reciept_cost = $fc_wrapper->field_reciept_cost->value();
          $reciept_cost['data'] = commerce_price_component_add($reciept_cost, 'basic_line_item', $reciept_cost, TRUE, FALSE);
          $line_items[] = _mp_invoices_line_item_create($order->order_id, "($reciept_type) $reciept_comment", 1, $reciept_cost, MP_INVOICES_LINE_ITEM_TYPE_ADDITIONAL);
        }
      }

      $order_wrapper->commerce_line_items = $line_items;
      $order_wrapper->save();
    }
  }
}
