diff --git a/profile2.admin.inc b/profile2.admin.inc
index 4394dc0..7f4acbd 100644
--- a/profile2.admin.inc
+++ b/profile2.admin.inc
@@ -58,6 +58,13 @@ function profile2_type_form($form, &$form_state, $profile_type, $op = 'edit') {
     '#default_value' => !empty($profile_type->data['registration']),
   );
 
+  $form['data']['revisions'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Create new revision.'),
+    '#default_value' => !empty($profile_type->data['revisions']),
+    '#description' => t('Users with <em>Administer profiles</em> will be able to override this option.'),
+  );
+
   $form['actions'] = array('#type' => 'actions');
   $form['actions']['submit'] = array(
     '#type' => 'submit',
diff --git a/profile2.install b/profile2.install
index 762b1ff..c57e7e4 100644
--- a/profile2.install
+++ b/profile2.install
@@ -16,7 +16,11 @@ function profile2_install() {
       'type' => 'main',
       'label' => t('Main profile'),
       'weight' => 0,
-      'data' => array('registration' => TRUE, 'use_page' => TRUE),
+      'data' => array(
+        'registration' => TRUE,
+        'use_page' => TRUE,
+        'revisions' => 0,
+      ),
     ));
     $type->save();
     user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('edit own main profile', 'view own main profile'));
@@ -36,6 +40,7 @@ function profile2_schema() {
         'not null' => TRUE,
         'description' => 'Primary Key: Unique profile item ID.',
       ),
+      'vid' => _profile2_vid_field(),
       'type' => array(
         'description' => 'The {profile_type}.type of this profile.',
         'type' => 'varchar',
@@ -82,8 +87,13 @@ function profile2_schema() {
       ),
     ),
     'primary key' => array('pid'),
+    'unique keys' => array(
+      'vid' => array('vid'),
+    ),
   );
 
+  $schema['profile_revision'] = _profile2_revision_table();
+
   $schema['profile_type'] = array(
     'description' => 'Stores information about all defined profile types.',
     'fields' => array(
@@ -144,6 +154,93 @@ function profile2_schema() {
 }
 
 /**
+ * Define the vid (version ID) field for the {profile} table.
+ *
+ * Put it in a separate function in order to guarantee that we use the same
+ * definition in hook_schema() and hook_update_N().
+ */
+function _profile2_vid_field() {
+  $vid_field = array(
+    'description' => 'The current {profile_revision}.vid version identifier.',
+    'type' => 'int',
+    'unsigned' => TRUE,
+    'not null' => FALSE,
+    'default' => NULL,
+  );
+
+  return $vid_field;
+}
+
+/**
+ * Define the {profile_revision} table.
+ *
+ * Put it in a separate function in order to guarantee that we use the same
+ * definition in hook_schema() and hook_update_N().
+ */
+function _profile2_revision_table() {
+  $profile_revision = array(
+    'description' => 'Stores information about each saved version of a {profile}.',
+    'fields' => array(
+      'pid' => array(
+        'description' => 'The {profile} this version belongs to.',
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'vid' => array(
+        'description' => 'Primary Key: Unique identifier of this version.',
+        'type' => 'serial',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+      ),
+      'authorid' => array(
+        'description' => 'The {users}.uid that created this version.',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'label' => array(
+        'description' => 'A human-readable label for this profile.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'log' => array(
+        'description' => 'The log entry explaining the changes in this version.',
+        'type' => 'text',
+        'not null' => TRUE,
+        'size' => 'big',
+      ),
+      'timestamp' => array(
+        'description' => 'A Unix timestamp indicating when this version was created.',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+    ),
+    'indexes' => array(
+      'pid' => array('pid'),
+      'authorid' => array('authorid'),
+    ),
+    'primary key' => array('vid'),
+    'foreign keys' => array(
+      'versioned_profile' => array(
+        'table' => 'profile',
+        'columns' => array('pid' => 'pid'),
+      ),
+      'version_uid' => array(
+        'table' => 'users',
+        'columns' => array('authorid' => 'uid'),
+      ),
+    ),
+  );
+
+  return $profile_revision;
+}
+
+/**
  * Add in the exportable entity db columns as required by the entity API.
  */
 function profile2_update_7100() {
@@ -204,3 +301,29 @@ function profile2_update_7102() {
     'not null' => FALSE,
   ));
 }
+
+/**
+ * Add revisioning support.
+ */
+function profile2_update_7103() {
+  db_add_field('profile', 'vid', _profile2_vid_field());
+
+  $profile_revision = _profile2_revision_table();
+  db_create_table('profile_revision', $profile_revision);
+
+  // Add version id data to the profile.
+  db_query('UPDATE {profile} SET vid = pid');
+
+  // Add current revision data to the revision table.
+  db_query("INSERT INTO {profile_revision} (pid, vid, authorid, label, log, timestamp)
+            SELECT pid, vid, uid, label, '', UNIX_TIMESTAMP()
+            FROM {profile}");
+
+  db_add_unique_key('profile', 'vid', array('vid'));
+
+  // Set the revisions flag for existing profiles.
+  foreach (profile2_get_types() as $profile_type) {
+    $profile_type->data['revisions'] = 0;
+    $profile_type->save();
+  }
+}
diff --git a/profile2.module b/profile2.module
index 66fb435..d6e103c 100644
--- a/profile2.module
+++ b/profile2.module
@@ -17,6 +17,7 @@ function profile2_entity_info() {
       'entity class' => 'Profile',
       'controller class' => 'EntityAPIController',
       'base table' => 'profile',
+      'revision table' => 'profile_revision',
       'fieldable' => TRUE,
       'view modes' => array(
         'account' => array(
@@ -26,6 +27,7 @@ function profile2_entity_info() {
       ),
       'entity keys' => array(
         'id' => 'pid',
+        'revision' => 'vid',
         'bundle' => 'type',
         'label' => 'label',
       ),
@@ -117,6 +119,15 @@ function profile2_permission() {
       'title' => t('Administer profiles'),
       'description' => t('Edit and view all user profiles.'),
     ),
+    'view profile revisions' => array(
+      'title' => t('View profile revisions'),
+    ),
+    'revert profile revisions' => array(
+      'title' => t('Revert profile revisions'),
+    ),
+    'delete profile revisions' => array(
+      'title' => t('Delete profile revisions'),
+    ),
   );
   // Generate per profile type permissions.
   foreach (profile2_get_types() as $type) {
@@ -140,6 +151,41 @@ function profile2_permission() {
 }
 
 /**
+ * Implements hook_menu().
+ */
+function profile2_menu() {
+  $items = array();
+  $items['profile/%profile2/revisions'] = array(
+    'title' => 'Revisions',
+    'page callback' => 'profile2_revision_overview',
+    'page arguments' => array(1),
+    'access arguments' => array('view profile revisions'),
+  );
+  $items['profile/%profile2/revisions/%/view'] = array(
+    'title' => 'Revisions',
+    'load arguments' => array(3),
+    'page callback' => 'profile2_view',
+    'page arguments' => array(1, 'page'),
+    'access arguments' => array('view profile revisions'),
+  );
+  $items['profile/%profile2/revisions/%/revert'] = array(
+    'title' => 'Revert to earlier revision',
+    'load arguments' => array(3),
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('profile2_revision_revert_confirm', 1),
+    'access arguments' =>  array('revert profile revisions'),
+  );
+  $items['profile/%profile2/revisions/%/delete'] = array(
+    'title' => 'Delete earlier revision',
+    'load arguments' => array(3),
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('profile2_revision_delete_confirm', 1),
+    'access arguments' =>  array('delete profile revisions'),
+  );
+  return $items;
+}
+
+/**
  * Gets an array of all profile types, keyed by the type name.
  *
  * @param $type_name
@@ -157,6 +203,8 @@ function profile2_get_types($type_name = NULL) {
  *
  * @param $pid
  *   Integer specifying the profile id.
+ * @param $vid
+ *   Integer specifying the revision id.
  * @param $reset
  *   A boolean indicating that the internal cache should be reset.
  * @return
@@ -164,8 +212,10 @@ function profile2_get_types($type_name = NULL) {
  *
  * @see profile2_load_multiple()
  */
-function profile2_load($pid, $reset = FALSE) {
-  $profiles = profile2_load_multiple(array($pid), array(), $reset);
+function profile2_load($pid = NULL, $vid = NULL, $reset = FALSE) {
+  $pids = (isset($pid) ? array($pid) : array());
+  $conditions = (isset($vid) ? array('vid' => $vid) : array());
+  $profiles = profile2_load_multiple($pids, $conditions, $reset);
   return reset($profiles);
 }
 
@@ -413,8 +463,57 @@ function profile2_form_user_register_form_alter(&$form, &$form_state) {
  */
 function profile2_attach_form(&$form, &$form_state) {
   foreach ($form_state['profiles'] as $type => $profile) {
+    // Add revision fields.
+    $profile_type = profile2_get_types($type);
+    $form['profile_' . $profile->type]['revision_information'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('Revision information'),
+      '#collapsible' => TRUE,
+      '#attributes' => array(
+        'class' => array('user-profile-form-revision-information'),
+      ),
+      '#weight' => 30,
+      '#access' => user_access('administer profiles'),
+    );
+    $form['profile_' . $profile->type]['revision_information']['revision'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Create new revision'),
+      '#default_value' => $profile_type->data['revisions'],
+    );
+    $form['profile_' . $profile->type]['revision_information']['log'] = array(
+      '#type' => 'textarea',
+      '#title' => t('Revision log message'),
+      '#rows' => 4,
+      '#description' => t('Provide an explanation of the changes you are making. This will help other authors understand your motivations.'),
+    );
+    $form['profile_' . $profile->type]['revision_information']['log']['#states'] = array(
+      'invisible' => array(
+        'input[name="revision"]' => array('checked' => FALSE),
+      ),
+    );
+    // If this user does not yet have a profile of this type, then force a new
+    // revision.
+    if (is_null($profile->pid)) {
+      $form['profile_' . $profile->type]['revision_information']['revision']['#default_value'] = 1;
+      $form['profile_' . $profile->type]['revision_information']['log']['#value']
+        = t('Initial revision.');
+      $form['profile_' . $profile->type]['revision_information']['#access'] = FALSE;
+    }
+
     $form['profile_' . $profile->type]['#tree'] = TRUE;
     $form['profile_' . $profile->type]['#parents'] = array('profile_' . $profile->type);
+    // The following lines were part of the proposed patch from
+    // https://drupal.org/node/1043128#comment-6915354 but I do not see that
+    // this is ever used, and it is odd to set $form['pid'] and $form['vid']
+    // inside the foreach ($form_state['profiles']) loop.
+    //
+    // foreach (array('pid', 'vid') as $key) {
+    //   $form[$key] = array(
+    //     '#type' => 'value',
+    //     '#value' => isset($profile->$key) ? $profile->$key : NULL,
+    //   );
+    // }
+
     field_attach_form('profile2', $profile, $form['profile_' . $profile->type], $form_state);
 
     if (count(field_info_instances('profile2', $profile->type)) == 0) {
@@ -487,6 +586,16 @@ function profile2_form_submit_build_profile(&$form, &$form_state) {
       }
     }
     field_attach_submit('profile2', $profile, $form['profile_' . $type], $form_state);
+
+    // Handle revisions.
+    if (!empty($form_state['values']['profile_' . $type]['revision_information']['revision'])) {
+      global $user;
+      $profile->authorid = $user->uid;
+      $profile->timestamp = REQUEST_TIME;
+      $profile->log = empty($form_state['values']['profile_' . $type]['revision_information']['log']) ?
+          '' : $form_state['values']['profile_' . $type]['revision_information']['log'];
+      $profile->is_new_revision = TRUE;
+    }
   }
 }
 
@@ -621,6 +730,13 @@ class Profile extends Entity {
   public $pid;
 
   /**
+   * The profile version id.
+   *
+   * @var integer
+   */
+  public $vid;
+
+  /**
    * The name of the profile type.
    *
    * @var string
@@ -669,6 +785,9 @@ class Profile extends Entity {
       // have that as interim label.
       $values['label'] = $type->label;
     }
+    if (!isset($values['log'])) {
+      $values['log'] = '';
+    }
     parent::__construct($values, 'profile2');
   }
 
@@ -745,6 +864,10 @@ class Profile extends Entity {
       $cache[$this->uid][$this->type] = $this->pid;
     }
   }
+
+  public function revisionDelete($revision_id) {
+    entity_get_controller($this->entityType)->revisionDelete($revision_id);
+  }
 }
 
 /**
@@ -832,3 +955,107 @@ function profile2_user_get_properties($account, array $options, $name) {
   return $profile ? $profile : NULL;
 }
 
+/**
+ * Return a list of all the existing revision numbers.
+ */
+function profile2_revision_list($profile) {
+  $revisions = array();
+  //  $result = db_select("profile_revision", "r"
+  $result = db_query('SELECT r.vid, r.log, r.authorid, p.vid AS current_vid, r.timestamp, u.name FROM {profile_revision} r LEFT JOIN {profile} p ON p.vid = r.vid INNER JOIN {users} u ON u.uid = r.authorid WHERE r.pid = :pid ORDER BY r.vid DESC', array(':pid' => $profile->pid));
+  foreach ($result as $revision) {
+    $revisions[$revision->vid] = $revision;
+  }
+  return $revisions;
+}
+
+/**
+ * Generate an overview table of older revisions of a profiles.
+ */
+function profile2_revision_overview($profile) {
+  $header = array(t('Revision'), array('data' => t('Operations'), 'colspan' => 2));
+  $revisions = profile2_revision_list($profile);
+  $rows = array();
+  $revert_permission = FALSE;
+  if ((user_access('revert profile revisions') || user_access('administer profiles')) && profile2_access('update', $profile)) {
+    $revert_permission = TRUE;
+  }
+  $delete_permission = FALSE;
+  if ((user_access('delete profile revisions') || user_access('administer profiles')) && profile2_access('delete', $profile)) {
+    $delete_permission = TRUE;
+  }
+  foreach ($revisions as $revision) {
+    $row = array();
+    $operations = array();
+    if ($revision->current_vid > 0) {
+      $row[] = array('data' => l(t($profile->label), "profile/$profile->pid/revisions/$revision->current_vid/view")
+               . (($revision->log != '') ? '<p class="revision-log">' . filter_xss($revision->log) . '</p>' : ''),
+               'class' => array('revision-current'));
+      $operations[] = array('data' => drupal_placeholder(t('current revision')), 'class' => array('revision-current'), 'colspan' => 2);
+    }
+    else {
+      $row[] = array('data' => l(t($profile->label), "profile/$profile->pid/revisions/$revision->vid/view")
+               . (($revision->log != '') ? '<p class="revision-log">' . filter_xss($revision->log) . '</p>' : ''));
+      if ($revert_permission) {
+        $operations[] = l(t('revert'), "profile/$profile->pid/revisions/$revision->vid/revert");
+      }
+      if ($delete_permission) {
+        $operations[] = l(t('delete'), "profile/$profile->pid/revisions/$revision->vid/delete");
+      }
+    }
+    $rows[] = array_merge($row, $operations);
+  }
+  $build['profile2_revisions_table'] = array(
+    '#theme' => 'table',
+    '#rows' => $rows,
+    '#header' => $header,
+  );
+  $build['profile2_back'] = array(
+    '#markup' => l(t("Back"), $_SERVER['HTTP_REFERER'])
+  );
+  return $build;
+}
+
+/**
+ * Implements hook_entity_view().
+ */
+function profile2_entity_view($entity, $type, $view_mode, $langcode) {
+  if ($type == 'profile2' && user_access('view profile revisions')) {
+    $entity->content['revisions'] = array(
+      '#markup' => l(t('View Revisions'), "profile/$entity->pid/revisions"),
+      '#weight' => 10,
+    );
+  }
+}
+
+/**
+ * Ask for confirmation of the reversion to prevent against CSRF attacks.
+ */
+function profile2_revision_revert_confirm($form, $form_state, $profile_revision) {
+  $form['#profile_revision'] = $profile_revision;
+  return confirm_form($form, t('Are you sure you want to revert to the revision?'), 'profile/' . $profile_revision->pid . '/revisions', '', t('Revert'), t('Cancel'));
+}
+function profile2_revision_revert_confirm_submit($form, &$form_state) {
+  $profile_revision = $form['#profile_revision'];
+  $profile_revision->revision = 1;
+  $profile_revision->log = t('Copy of the revision.');
+
+  entity_revision_set_default('profile2', $profile_revision);
+  entity_save('profile2', $profile_revision);
+  drupal_set_message(t('@type has been reverted back to the revision.', array('@type' => $profile_revision->type)));
+  $form_state['redirect'] = 'profile/' . $profile_revision->pid . '/revisions';
+}
+
+function profile2_revision_delete_confirm($form, $form_state, $profile_revision) {
+  $form['#profile_revision'] = $profile_revision;
+  return confirm_form($form, t('Are you sure you want to delete the revision?'), 'profile/' . $profile_revision->pid . '/revisions', t('This action cannot be undone.'), t('Delete'), t('Cancel'));
+}
+
+function profile2_revision_delete_confirm_submit($form, &$form_state) {
+  $profile_revision = $form['#profile_revision'];
+  $deleted = entity_revision_delete('profile2', $profile_revision->vid);
+  if ($deleted)
+    drupal_set_message(t('@type revision is deleted.', array('@type' => $profile_revision->type)));
+  else
+    drupal_set_message(t('Error occured while deleting revision.'), 'error');
+  $form_state['redirect'] = 'profile/' . $profile_revision->pid . '/revisions';
+}
