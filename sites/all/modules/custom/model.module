<?php 
	
	function model_block_info() {    
	  $blocks['model_video'] = array(
	    // info: The name of the block.
	    'info' => t('Model videos to show'),
	  );

	  return $blocks;
	}

	function model_block_view($delta = '') {
	  $uid = arg(2);
	  $block['subject'] = t('');
	  $profile = db_select('profile', 'p')
	    ->fields('p')
	    ->condition('uid', $uid, '=')
	    ->condition('type','model_videos', '=')
	    ->execute()
	    ->fetchAssoc();

	  $videos = db_select('field_data_field_videos', 'video')
	    ->fields('video')
	    ->condition('entity_id', $profile['pid'],'=')
	    ->execute();

	    $block['content'] = '<div class="book-videos">';
	    foreach($videos as $video) {
	    	$url = $video->field_videos_video_url;
	    	$url=explode('?v=', $url);
	      $block['content'].= '<iframe style="margin:10px; width="300" height="280"src="https://www.youtube.com/embed/'.$url[1].'"></iframe>';
	    }
	    $block['content'] .="</div>";
	return $block;
	}

	/**
	 * Implements hook_menu().
	 */
	function model_menu() {
	  $items = array();

	  $items['user/%user/hybridauth'] = array(
	    'title' => '',
	    'page callback' => 'hybridauth_user_identity',
	    'page arguments' => array(1),
	    'access callback' => 'user_edit_access',
	    'access arguments' => array(1),
	    'file' => 'hybridauth.pages.inc',
	    'type' => MENU_LOCAL_TASK,
	  );
	  return $items;
	}

	/**
	* Implement hook chema
	*/
	function model_schema() {
	  $schema = array();
	  $schema['model_job'] = array(
	    'description' => 'bridge between model and job',
	    'fields' => array(
	      'uid' => array(
	        'type' => 'varchar',
	        'length' => 255,
	        'not null' => TRUE,
	        'description' => 'model uid',
	      ),
	      'job_id' => array(
	        'type' => 'varchar',
	        'length' => 255,
	        'not null' => TRUE,
	        'default' => '',
	        'description' => 'job id',
	      ),
	      'job_status' => array(
	        'type' => 'varchar',
	        'length' => 255,
	        'not null' => TRUE,
	        'default' => '',
	        'description' => 'job status for model',
	      ),
	  )
	 );
	  return $schema;
	}

	//create table for model job status
	function model_update_7001() {

	  $schema = model_schema();
	  if(!db_table_exists('model_job'))
	    db_create_table('model_job', $schema['model_job']);
	}

	/**
	 * Implements hook_views_query_alter().
	 */
	function model_views_query_alter($view, $query) {  
		
	    if($view->name == "job_models" && $view->current_display=='block_1') {

	        $join = new views_join();
	        $join->table = 'model_job';
	        $join->field = 'job_id';
	        $join->left_table = 'node_field_data_field_job';
	        $join->left_field = 'nid';
	        $join->type = 'INNER';
	        $join->extra = 'model_job.uid = users.uid';


	        $query->add_relationship('model_job', $join, 'node_field_data_field_job');

	        $query->where[1]['conditions'][] = array(
			 'field' => 'model_job.job_status',
			 'value' => 'accepted',
			 'operator' => '='
			);
	    }
	  }
	
	// starting block validation model profile form
	  function model_form_user_profile_form_alter(&$form, &$form_state, $form_id)
	  {
	  	global $user;

	  	if(in_array('Customer', $user->roles)){
	  		$form['field_current_location']['#access'] = FALSE;
	  	}
	  	$form['#validate'][] = 'model_article_form_validate';
	  }
	  
	  function model_article_form_validate($form, &$form_state) 
	  {
		if(!empty($form_state['input']['profile_model_basic_informaiton']))
		{
			if($form_state['input']['profile_model_basic_informaiton']['field_daily_rate']['und'][0]['amount'] < 500){
				form_set_error('title', 'Daily Rate can not be less than 500');
			}
		}
	  }

	// ending block

	function model_form_simplenews_block_form_alter (&$form, &$form_state, $form_id)
	{
		$form['#validate'][] = 'simplenews_block_form_validate_email';
	}

	function simplenews_block_form_validate_email($form, &$form_state)
	{
		
		if($form_state['values']['action']=='subscribe'){
			$result = db_select('simplenews_subscriber', 'ss')
			    ->fields('ss')
			    ->condition('mail', $form_state['values']['mail'],'=')
			    ->condition('activated', 1,'=')
			    ->execute();
			$num_of_results = $result->rowCount();
			if($result->rowCount() > 0)
			{
				form_set_error('title', $form_state['values']['mail'].t(' : Email already exist.'));
			}
		}

	}

	function model_form_alter(&$form, &$form_state, $form_id) {
	    if ($form_id == 'views_exposed_form') {
	        $view = $form_state['view'];
	        if ($view->name == 'job_models' && $view->current_display == 'block') {
	            $node = node_load(arg(1));
	            $form['field_geofield_distance']['#default_value']['origin'] = $node->field_job_location['und'][0]['locality'].' '.$node->field_job_location['und'][0]['postal_code'];
	        }
	    }
	}

?>